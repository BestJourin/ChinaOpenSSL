// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_rec_old.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zss_5frec_5fold_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zss_5frec_5fold_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zss_debug.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zss_5frec_5fold_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zss_5frec_5fold_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5frec_5fold_2eproto;
namespace ZSS {
namespace Protocol {
class Ball4Rec;
class Ball4RecDefaultTypeInternal;
extern Ball4RecDefaultTypeInternal _Ball4Rec_default_instance_;
class Balls4Rec;
class Balls4RecDefaultTypeInternal;
extern Balls4RecDefaultTypeInternal _Balls4Rec_default_instance_;
class MaintainVision;
class MaintainVisionDefaultTypeInternal;
extern MaintainVisionDefaultTypeInternal _MaintainVision_default_instance_;
class RecMessage;
class RecMessageDefaultTypeInternal;
extern RecMessageDefaultTypeInternal _RecMessage_default_instance_;
class RecMessages;
class RecMessagesDefaultTypeInternal;
extern RecMessagesDefaultTypeInternal _RecMessages_default_instance_;
class Robot4Rec;
class Robot4RecDefaultTypeInternal;
extern Robot4RecDefaultTypeInternal _Robot4Rec_default_instance_;
class SelectedArea;
class SelectedAreaDefaultTypeInternal;
extern SelectedAreaDefaultTypeInternal _SelectedArea_default_instance_;
class TeamRobotMsg;
class TeamRobotMsgDefaultTypeInternal;
extern TeamRobotMsgDefaultTypeInternal _TeamRobotMsg_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> ::ZSS::Protocol::Ball4Rec* Arena::CreateMaybeMessage<::ZSS::Protocol::Ball4Rec>(Arena*);
template<> ::ZSS::Protocol::Balls4Rec* Arena::CreateMaybeMessage<::ZSS::Protocol::Balls4Rec>(Arena*);
template<> ::ZSS::Protocol::MaintainVision* Arena::CreateMaybeMessage<::ZSS::Protocol::MaintainVision>(Arena*);
template<> ::ZSS::Protocol::RecMessage* Arena::CreateMaybeMessage<::ZSS::Protocol::RecMessage>(Arena*);
template<> ::ZSS::Protocol::RecMessages* Arena::CreateMaybeMessage<::ZSS::Protocol::RecMessages>(Arena*);
template<> ::ZSS::Protocol::Robot4Rec* Arena::CreateMaybeMessage<::ZSS::Protocol::Robot4Rec>(Arena*);
template<> ::ZSS::Protocol::SelectedArea* Arena::CreateMaybeMessage<::ZSS::Protocol::SelectedArea>(Arena*);
template<> ::ZSS::Protocol::TeamRobotMsg* Arena::CreateMaybeMessage<::ZSS::Protocol::TeamRobotMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZSS {
namespace Protocol {

// ===================================================================

class RecMessages :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.RecMessages) */ {
 public:
  RecMessages();
  virtual ~RecMessages();

  RecMessages(const RecMessages& from);
  RecMessages(RecMessages&& from) noexcept
    : RecMessages() {
    *this = ::std::move(from);
  }

  inline RecMessages& operator=(const RecMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecMessages& operator=(RecMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecMessages* internal_default_instance() {
    return reinterpret_cast<const RecMessages*>(
               &_RecMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecMessages& a, RecMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(RecMessages* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecMessages* New() const final {
    return CreateMaybeMessage<RecMessages>(nullptr);
  }

  RecMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecMessages& from);
  void MergeFrom(const RecMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.RecMessages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecMsgsFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  int recmsgs_size() const;
  void clear_recmsgs();
  ::ZSS::Protocol::RecMessage* mutable_recmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >*
      mutable_recmsgs();
  const ::ZSS::Protocol::RecMessage& recmsgs(int index) const;
  ::ZSS::Protocol::RecMessage* add_recmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >&
      recmsgs() const;

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.RecMessages)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage > recmsgs_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class RecMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.RecMessage) */ {
 public:
  RecMessage();
  virtual ~RecMessage();

  RecMessage(const RecMessage& from);
  RecMessage(RecMessage&& from) noexcept
    : RecMessage() {
    *this = ::std::move(from);
  }

  inline RecMessage& operator=(const RecMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecMessage& operator=(RecMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecMessage* internal_default_instance() {
    return reinterpret_cast<const RecMessage*>(
               &_RecMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecMessage& a, RecMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RecMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecMessage* New() const final {
    return CreateMaybeMessage<RecMessage>(nullptr);
  }

  RecMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecMessage& from);
  void MergeFrom(const RecMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.RecMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugMsgsFieldNumber = 4,
    kSelectedAreaFieldNumber = 2,
    kMaintainVisionFieldNumber = 3,
    kCtrlCFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  int debugmsgs_size() const;
  void clear_debugmsgs();
  ::ZSS::Protocol::Debug_Msgs* mutable_debugmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >*
      mutable_debugmsgs();
  const ::ZSS::Protocol::Debug_Msgs& debugmsgs(int index) const;
  ::ZSS::Protocol::Debug_Msgs* add_debugmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >&
      debugmsgs() const;

  // required .ZSS.Protocol.SelectedArea selectedArea = 2;
  bool has_selectedarea() const;
  void clear_selectedarea();
  const ::ZSS::Protocol::SelectedArea& selectedarea() const;
  ::ZSS::Protocol::SelectedArea* release_selectedarea();
  ::ZSS::Protocol::SelectedArea* mutable_selectedarea();
  void set_allocated_selectedarea(::ZSS::Protocol::SelectedArea* selectedarea);

  // required .ZSS.Protocol.MaintainVision maintainVision = 3;
  bool has_maintainvision() const;
  void clear_maintainvision();
  const ::ZSS::Protocol::MaintainVision& maintainvision() const;
  ::ZSS::Protocol::MaintainVision* release_maintainvision();
  ::ZSS::Protocol::MaintainVision* mutable_maintainvision();
  void set_allocated_maintainvision(::ZSS::Protocol::MaintainVision* maintainvision);

  // required bool ctrlC = 1;
  bool has_ctrlc() const;
  void clear_ctrlc();
  bool ctrlc() const;
  void set_ctrlc(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.RecMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs > debugmsgs_;
  ::ZSS::Protocol::SelectedArea* selectedarea_;
  ::ZSS::Protocol::MaintainVision* maintainvision_;
  bool ctrlc_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class SelectedArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.SelectedArea) */ {
 public:
  SelectedArea();
  virtual ~SelectedArea();

  SelectedArea(const SelectedArea& from);
  SelectedArea(SelectedArea&& from) noexcept
    : SelectedArea() {
    *this = ::std::move(from);
  }

  inline SelectedArea& operator=(const SelectedArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectedArea& operator=(SelectedArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectedArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectedArea* internal_default_instance() {
    return reinterpret_cast<const SelectedArea*>(
               &_SelectedArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelectedArea& a, SelectedArea& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectedArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectedArea* New() const final {
    return CreateMaybeMessage<SelectedArea>(nullptr);
  }

  SelectedArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectedArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectedArea& from);
  void MergeFrom(const SelectedArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectedArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.SelectedArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxXFieldNumber = 1,
    kMaxYFieldNumber = 2,
    kMinXFieldNumber = 3,
    kMinYFieldNumber = 4,
  };
  // required float maxX = 1;
  bool has_maxx() const;
  void clear_maxx();
  float maxx() const;
  void set_maxx(float value);

  // required float maxY = 2;
  bool has_maxy() const;
  void clear_maxy();
  float maxy() const;
  void set_maxy(float value);

  // required float minX = 3;
  bool has_minx() const;
  void clear_minx();
  float minx() const;
  void set_minx(float value);

  // required float minY = 4;
  bool has_miny() const;
  void clear_miny();
  float miny() const;
  void set_miny(float value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.SelectedArea)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float maxx_;
  float maxy_;
  float minx_;
  float miny_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class MaintainVision :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.MaintainVision) */ {
 public:
  MaintainVision();
  virtual ~MaintainVision();

  MaintainVision(const MaintainVision& from);
  MaintainVision(MaintainVision&& from) noexcept
    : MaintainVision() {
    *this = ::std::move(from);
  }

  inline MaintainVision& operator=(const MaintainVision& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaintainVision& operator=(MaintainVision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaintainVision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaintainVision* internal_default_instance() {
    return reinterpret_cast<const MaintainVision*>(
               &_MaintainVision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MaintainVision& a, MaintainVision& b) {
    a.Swap(&b);
  }
  inline void Swap(MaintainVision* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaintainVision* New() const final {
    return CreateMaybeMessage<MaintainVision>(nullptr);
  }

  MaintainVision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaintainVision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaintainVision& from);
  void MergeFrom(const MaintainVision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaintainVision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.MaintainVision";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessMsgFieldNumber = 3,
    kMaintainFieldNumber = 4,
    kBallsFieldNumber = 5,
    kLastTouchFieldNumber = 1,
    kLastTouchTeamFieldNumber = 2,
  };
  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  int processmsg_size() const;
  void clear_processmsg();
  ::ZSS::Protocol::TeamRobotMsg* mutable_processmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
      mutable_processmsg();
  const ::ZSS::Protocol::TeamRobotMsg& processmsg(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* add_processmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
      processmsg() const;

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  int maintain_size() const;
  void clear_maintain();
  ::ZSS::Protocol::TeamRobotMsg* mutable_maintain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
      mutable_maintain();
  const ::ZSS::Protocol::TeamRobotMsg& maintain(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* add_maintain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
      maintain() const;

  // required .ZSS.Protocol.Balls4Rec balls = 5;
  bool has_balls() const;
  void clear_balls();
  const ::ZSS::Protocol::Balls4Rec& balls() const;
  ::ZSS::Protocol::Balls4Rec* release_balls();
  ::ZSS::Protocol::Balls4Rec* mutable_balls();
  void set_allocated_balls(::ZSS::Protocol::Balls4Rec* balls);

  // required int32 lastTouch = 1;
  bool has_lasttouch() const;
  void clear_lasttouch();
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouch() const;
  void set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 lastTouchTeam = 2;
  bool has_lasttouchteam() const;
  void clear_lasttouchteam();
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouchteam() const;
  void set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.MaintainVision)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg > processmsg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg > maintain_;
  ::ZSS::Protocol::Balls4Rec* balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouch_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouchteam_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class TeamRobotMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.TeamRobotMsg) */ {
 public:
  TeamRobotMsg();
  virtual ~TeamRobotMsg();

  TeamRobotMsg(const TeamRobotMsg& from);
  TeamRobotMsg(TeamRobotMsg&& from) noexcept
    : TeamRobotMsg() {
    *this = ::std::move(from);
  }

  inline TeamRobotMsg& operator=(const TeamRobotMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamRobotMsg& operator=(TeamRobotMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamRobotMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRobotMsg* internal_default_instance() {
    return reinterpret_cast<const TeamRobotMsg*>(
               &_TeamRobotMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamRobotMsg& a, TeamRobotMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamRobotMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamRobotMsg* New() const final {
    return CreateMaybeMessage<TeamRobotMsg>(nullptr);
  }

  TeamRobotMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamRobotMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamRobotMsg& from);
  void MergeFrom(const TeamRobotMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRobotMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.TeamRobotMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.Robot4Rec robot = 2;
  int robot_size() const;
  void clear_robot();
  ::ZSS::Protocol::Robot4Rec* mutable_robot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >*
      mutable_robot();
  const ::ZSS::Protocol::Robot4Rec& robot(int index) const;
  ::ZSS::Protocol::Robot4Rec* add_robot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >&
      robot() const;

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.TeamRobotMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec > robot_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class Robot4Rec :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot4Rec) */ {
 public:
  Robot4Rec();
  virtual ~Robot4Rec();

  Robot4Rec(const Robot4Rec& from);
  Robot4Rec(Robot4Rec&& from) noexcept
    : Robot4Rec() {
    *this = ::std::move(from);
  }

  inline Robot4Rec& operator=(const Robot4Rec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot4Rec& operator=(Robot4Rec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot4Rec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot4Rec* internal_default_instance() {
    return reinterpret_cast<const Robot4Rec*>(
               &_Robot4Rec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Robot4Rec& a, Robot4Rec& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot4Rec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot4Rec* New() const final {
    return CreateMaybeMessage<Robot4Rec>(nullptr);
  }

  Robot4Rec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot4Rec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot4Rec& from);
  void MergeFrom(const Robot4Rec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot4Rec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Robot4Rec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kAngleFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // required double posX = 2;
  bool has_posx() const;
  void clear_posx();
  double posx() const;
  void set_posx(double value);

  // required double posY = 3;
  bool has_posy() const;
  void clear_posy();
  double posy() const;
  void set_posy(double value);

  // required double angle = 4;
  bool has_angle() const;
  void clear_angle();
  double angle() const;
  void set_angle(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot4Rec)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double posx_;
  double posy_;
  double angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class Balls4Rec :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Balls4Rec) */ {
 public:
  Balls4Rec();
  virtual ~Balls4Rec();

  Balls4Rec(const Balls4Rec& from);
  Balls4Rec(Balls4Rec&& from) noexcept
    : Balls4Rec() {
    *this = ::std::move(from);
  }

  inline Balls4Rec& operator=(const Balls4Rec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balls4Rec& operator=(Balls4Rec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Balls4Rec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Balls4Rec* internal_default_instance() {
    return reinterpret_cast<const Balls4Rec*>(
               &_Balls4Rec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Balls4Rec& a, Balls4Rec& b) {
    a.Swap(&b);
  }
  inline void Swap(Balls4Rec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balls4Rec* New() const final {
    return CreateMaybeMessage<Balls4Rec>(nullptr);
  }

  Balls4Rec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balls4Rec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Balls4Rec& from);
  void MergeFrom(const Balls4Rec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balls4Rec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Balls4Rec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.Ball4Rec ball = 2;
  int ball_size() const;
  void clear_ball();
  ::ZSS::Protocol::Ball4Rec* mutable_ball(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >*
      mutable_ball();
  const ::ZSS::Protocol::Ball4Rec& ball(int index) const;
  ::ZSS::Protocol::Ball4Rec* add_ball();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >&
      ball() const;

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Balls4Rec)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec > ball_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// -------------------------------------------------------------------

class Ball4Rec :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Ball4Rec) */ {
 public:
  Ball4Rec();
  virtual ~Ball4Rec();

  Ball4Rec(const Ball4Rec& from);
  Ball4Rec(Ball4Rec&& from) noexcept
    : Ball4Rec() {
    *this = ::std::move(from);
  }

  inline Ball4Rec& operator=(const Ball4Rec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ball4Rec& operator=(Ball4Rec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ball4Rec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball4Rec* internal_default_instance() {
    return reinterpret_cast<const Ball4Rec*>(
               &_Ball4Rec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ball4Rec& a, Ball4Rec& b) {
    a.Swap(&b);
  }
  inline void Swap(Ball4Rec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ball4Rec* New() const final {
    return CreateMaybeMessage<Ball4Rec>(nullptr);
  }

  Ball4Rec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ball4Rec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ball4Rec& from);
  void MergeFrom(const Ball4Rec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball4Rec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Ball4Rec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5frec_5fold_2eproto);
    return ::descriptor_table_zss_5frec_5fold_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kValidFieldNumber = 3,
  };
  // required double posX = 1;
  bool has_posx() const;
  void clear_posx();
  double posx() const;
  void set_posx(double value);

  // required double posY = 2;
  bool has_posy() const;
  void clear_posy();
  double posy() const;
  void set_posy(double value);

  // optional bool valid = 3;
  bool has_valid() const;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Ball4Rec)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double posx_;
  double posy_;
  bool valid_;
  friend struct ::TableStruct_zss_5frec_5fold_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecMessages

// repeated .ZSS.Protocol.RecMessage recMsgs = 1;
inline int RecMessages::recmsgs_size() const {
  return recmsgs_.size();
}
inline void RecMessages::clear_recmsgs() {
  recmsgs_.Clear();
}
inline ::ZSS::Protocol::RecMessage* RecMessages::mutable_recmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >*
RecMessages::mutable_recmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessages.recMsgs)
  return &recmsgs_;
}
inline const ::ZSS::Protocol::RecMessage& RecMessages::recmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Get(index);
}
inline ::ZSS::Protocol::RecMessage* RecMessages::add_recmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >&
RecMessages::recmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_;
}

// -------------------------------------------------------------------

// RecMessage

// required bool ctrlC = 1;
inline bool RecMessage::has_ctrlc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecMessage::clear_ctrlc() {
  ctrlc_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RecMessage::ctrlc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.ctrlC)
  return ctrlc_;
}
inline void RecMessage::set_ctrlc(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ctrlc_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.RecMessage.ctrlC)
}

// required .ZSS.Protocol.SelectedArea selectedArea = 2;
inline bool RecMessage::has_selectedarea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecMessage::clear_selectedarea() {
  if (selectedarea_ != nullptr) selectedarea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ZSS::Protocol::SelectedArea& RecMessage::selectedarea() const {
  const ::ZSS::Protocol::SelectedArea* p = selectedarea_;
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.selectedArea)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::SelectedArea*>(
      &::ZSS::Protocol::_SelectedArea_default_instance_);
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::release_selectedarea() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.selectedArea)
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::SelectedArea* temp = selectedarea_;
  selectedarea_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::mutable_selectedarea() {
  _has_bits_[0] |= 0x00000001u;
  if (selectedarea_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::SelectedArea>(GetArenaNoVirtual());
    selectedarea_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.selectedArea)
  return selectedarea_;
}
inline void RecMessage::set_allocated_selectedarea(::ZSS::Protocol::SelectedArea* selectedarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete selectedarea_;
  }
  if (selectedarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selectedarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedarea, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selectedarea_ = selectedarea;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.selectedArea)
}

// required .ZSS.Protocol.MaintainVision maintainVision = 3;
inline bool RecMessage::has_maintainvision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecMessage::clear_maintainvision() {
  if (maintainvision_ != nullptr) maintainvision_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ZSS::Protocol::MaintainVision& RecMessage::maintainvision() const {
  const ::ZSS::Protocol::MaintainVision* p = maintainvision_;
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.maintainVision)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::MaintainVision*>(
      &::ZSS::Protocol::_MaintainVision_default_instance_);
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::release_maintainvision() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.maintainVision)
  _has_bits_[0] &= ~0x00000002u;
  ::ZSS::Protocol::MaintainVision* temp = maintainvision_;
  maintainvision_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::mutable_maintainvision() {
  _has_bits_[0] |= 0x00000002u;
  if (maintainvision_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::MaintainVision>(GetArenaNoVirtual());
    maintainvision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.maintainVision)
  return maintainvision_;
}
inline void RecMessage::set_allocated_maintainvision(::ZSS::Protocol::MaintainVision* maintainvision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maintainvision_;
  }
  if (maintainvision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maintainvision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maintainvision, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  maintainvision_ = maintainvision;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.maintainVision)
}

// repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
inline int RecMessage::debugmsgs_size() const {
  return debugmsgs_.size();
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::mutable_debugmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >*
RecMessage::mutable_debugmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessage.debugMsgs)
  return &debugmsgs_;
}
inline const ::ZSS::Protocol::Debug_Msgs& RecMessage::debugmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Get(index);
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::add_debugmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >&
RecMessage::debugmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_;
}

// -------------------------------------------------------------------

// SelectedArea

// required float maxX = 1;
inline bool SelectedArea::has_maxx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectedArea::clear_maxx() {
  maxx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SelectedArea::maxx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxX)
  return maxx_;
}
inline void SelectedArea::set_maxx(float value) {
  _has_bits_[0] |= 0x00000001u;
  maxx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxX)
}

// required float maxY = 2;
inline bool SelectedArea::has_maxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectedArea::clear_maxy() {
  maxy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SelectedArea::maxy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxY)
  return maxy_;
}
inline void SelectedArea::set_maxy(float value) {
  _has_bits_[0] |= 0x00000002u;
  maxy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxY)
}

// required float minX = 3;
inline bool SelectedArea::has_minx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectedArea::clear_minx() {
  minx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SelectedArea::minx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minX)
  return minx_;
}
inline void SelectedArea::set_minx(float value) {
  _has_bits_[0] |= 0x00000004u;
  minx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minX)
}

// required float minY = 4;
inline bool SelectedArea::has_miny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectedArea::clear_miny() {
  miny_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SelectedArea::miny() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minY)
  return miny_;
}
inline void SelectedArea::set_miny(float value) {
  _has_bits_[0] |= 0x00000008u;
  miny_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minY)
}

// -------------------------------------------------------------------

// MaintainVision

// required int32 lastTouch = 1;
inline bool MaintainVision::has_lasttouch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaintainVision::clear_lasttouch() {
  lasttouch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::lasttouch() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouch)
  return lasttouch_;
}
inline void MaintainVision::set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lasttouch_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouch)
}

// required int32 lastTouchTeam = 2;
inline bool MaintainVision::has_lasttouchteam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaintainVision::clear_lasttouchteam() {
  lasttouchteam_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::lasttouchteam() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouchTeam)
  return lasttouchteam_;
}
inline void MaintainVision::set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lasttouchteam_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouchTeam)
}

// repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
inline int MaintainVision::processmsg_size() const {
  return processmsg_.size();
}
inline void MaintainVision::clear_processmsg() {
  processmsg_.Clear();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_processmsg(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_processmsg() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.processMsg)
  return &processmsg_;
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::processmsg(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Get(index);
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_processmsg() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::processmsg() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_;
}

// repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
inline int MaintainVision::maintain_size() const {
  return maintain_.size();
}
inline void MaintainVision::clear_maintain() {
  maintain_.Clear();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_maintain(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_maintain() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.maintain)
  return &maintain_;
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::maintain(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Get(index);
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_maintain() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::maintain() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.maintain)
  return maintain_;
}

// required .ZSS.Protocol.Balls4Rec balls = 5;
inline bool MaintainVision::has_balls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaintainVision::clear_balls() {
  if (balls_ != nullptr) balls_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ZSS::Protocol::Balls4Rec& MaintainVision::balls() const {
  const ::ZSS::Protocol::Balls4Rec* p = balls_;
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.balls)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::Balls4Rec*>(
      &::ZSS::Protocol::_Balls4Rec_default_instance_);
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::release_balls() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.MaintainVision.balls)
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::Balls4Rec* temp = balls_;
  balls_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::mutable_balls() {
  _has_bits_[0] |= 0x00000001u;
  if (balls_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Balls4Rec>(GetArenaNoVirtual());
    balls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.balls)
  return balls_;
}
inline void MaintainVision::set_allocated_balls(::ZSS::Protocol::Balls4Rec* balls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete balls_;
  }
  if (balls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  balls_ = balls;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.MaintainVision.balls)
}

// -------------------------------------------------------------------

// TeamRobotMsg

// required int32 size = 1;
inline bool TeamRobotMsg::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRobotMsg::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamRobotMsg::size() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.TeamRobotMsg.size)
  return size_;
}
inline void TeamRobotMsg::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.TeamRobotMsg.size)
}

// repeated .ZSS.Protocol.Robot4Rec robot = 2;
inline int TeamRobotMsg::robot_size() const {
  return robot_.size();
}
inline void TeamRobotMsg::clear_robot() {
  robot_.Clear();
}
inline ::ZSS::Protocol::Robot4Rec* TeamRobotMsg::mutable_robot(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >*
TeamRobotMsg::mutable_robot() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.TeamRobotMsg.robot)
  return &robot_;
}
inline const ::ZSS::Protocol::Robot4Rec& TeamRobotMsg::robot(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Get(index);
}
inline ::ZSS::Protocol::Robot4Rec* TeamRobotMsg::add_robot() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >&
TeamRobotMsg::robot() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_;
}

// -------------------------------------------------------------------

// Robot4Rec

// optional int32 id = 1;
inline bool Robot4Rec::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Robot4Rec::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot4Rec::id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.id)
  return id_;
}
inline void Robot4Rec::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.id)
}

// required double posX = 2;
inline bool Robot4Rec::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot4Rec::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Robot4Rec::posx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posX)
  return posx_;
}
inline void Robot4Rec::set_posx(double value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posX)
}

// required double posY = 3;
inline bool Robot4Rec::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot4Rec::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Robot4Rec::posy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posY)
  return posy_;
}
inline void Robot4Rec::set_posy(double value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posY)
}

// required double angle = 4;
inline bool Robot4Rec::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot4Rec::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Robot4Rec::angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.angle)
  return angle_;
}
inline void Robot4Rec::set_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  angle_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.angle)
}

// -------------------------------------------------------------------

// Balls4Rec

// required int32 size = 1;
inline bool Balls4Rec::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Balls4Rec::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Balls4Rec::size() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.size)
  return size_;
}
inline void Balls4Rec::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Balls4Rec.size)
}

// repeated .ZSS.Protocol.Ball4Rec ball = 2;
inline int Balls4Rec::ball_size() const {
  return ball_.size();
}
inline void Balls4Rec::clear_ball() {
  ball_.Clear();
}
inline ::ZSS::Protocol::Ball4Rec* Balls4Rec::mutable_ball(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >*
Balls4Rec::mutable_ball() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Balls4Rec.ball)
  return &ball_;
}
inline const ::ZSS::Protocol::Ball4Rec& Balls4Rec::ball(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Get(index);
}
inline ::ZSS::Protocol::Ball4Rec* Balls4Rec::add_ball() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Ball4Rec >&
Balls4Rec::ball() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Balls4Rec.ball)
  return ball_;
}

// -------------------------------------------------------------------

// Ball4Rec

// required double posX = 1;
inline bool Ball4Rec::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball4Rec::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Ball4Rec::posx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.posX)
  return posx_;
}
inline void Ball4Rec::set_posx(double value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.posX)
}

// required double posY = 2;
inline bool Ball4Rec::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball4Rec::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Ball4Rec::posy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.posY)
  return posy_;
}
inline void Ball4Rec::set_posy(double value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.posY)
}

// optional bool valid = 3;
inline bool Ball4Rec::has_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ball4Rec::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Ball4Rec::valid() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Ball4Rec.valid)
  return valid_;
}
inline void Ball4Rec::set_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Ball4Rec.valid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zss_5frec_5fold_2eproto
