// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_controller_common.pb.h"
#include "ssl_game_event_2019.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
class AutoRefMessage;
class AutoRefMessageDefaultTypeInternal;
extern AutoRefMessageDefaultTypeInternal _AutoRefMessage_default_instance_;
class AutoRefMessage_WaitForBots;
class AutoRefMessage_WaitForBotsDefaultTypeInternal;
extern AutoRefMessage_WaitForBotsDefaultTypeInternal _AutoRefMessage_WaitForBots_default_instance_;
class AutoRefMessage_WaitForBots_Violator;
class AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal;
extern AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal _AutoRefMessage_WaitForBots_Violator_default_instance_;
class AutoRefRegistration;
class AutoRefRegistrationDefaultTypeInternal;
extern AutoRefRegistrationDefaultTypeInternal _AutoRefRegistration_default_instance_;
class AutoRefToController;
class AutoRefToControllerDefaultTypeInternal;
extern AutoRefToControllerDefaultTypeInternal _AutoRefToController_default_instance_;
class ControllerToAutoRef;
class ControllerToAutoRefDefaultTypeInternal;
extern ControllerToAutoRefDefaultTypeInternal _ControllerToAutoRef_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AutoRefMessage* Arena::CreateMaybeMessage<::AutoRefMessage>(Arena*);
template<> ::AutoRefMessage_WaitForBots* Arena::CreateMaybeMessage<::AutoRefMessage_WaitForBots>(Arena*);
template<> ::AutoRefMessage_WaitForBots_Violator* Arena::CreateMaybeMessage<::AutoRefMessage_WaitForBots_Violator>(Arena*);
template<> ::AutoRefRegistration* Arena::CreateMaybeMessage<::AutoRefRegistration>(Arena*);
template<> ::AutoRefToController* Arena::CreateMaybeMessage<::AutoRefToController>(Arena*);
template<> ::ControllerToAutoRef* Arena::CreateMaybeMessage<::ControllerToAutoRef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AutoRefRegistration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefRegistration) */ {
 public:
  AutoRefRegistration();
  virtual ~AutoRefRegistration();

  AutoRefRegistration(const AutoRefRegistration& from);
  AutoRefRegistration(AutoRefRegistration&& from) noexcept
    : AutoRefRegistration() {
    *this = ::std::move(from);
  }

  inline AutoRefRegistration& operator=(const AutoRefRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefRegistration& operator=(AutoRefRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefRegistration* internal_default_instance() {
    return reinterpret_cast<const AutoRefRegistration*>(
               &_AutoRefRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutoRefRegistration& a, AutoRefRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefRegistration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefRegistration* New() const final {
    return CreateMaybeMessage<AutoRefRegistration>(nullptr);
  }

  AutoRefRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefRegistration& from);
  void MergeFrom(const AutoRefRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefRegistration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // required string identifier = 1;
  bool has_identifier() const;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);

  // optional .Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // @@protoc_insertion_point(class_scope:AutoRefRegistration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::Signature* signature_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefToController :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefToController) */ {
 public:
  AutoRefToController();
  virtual ~AutoRefToController();

  AutoRefToController(const AutoRefToController& from);
  AutoRefToController(AutoRefToController&& from) noexcept
    : AutoRefToController() {
    *this = ::std::move(from);
  }

  inline AutoRefToController& operator=(const AutoRefToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefToController& operator=(AutoRefToController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefToController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefToController* internal_default_instance() {
    return reinterpret_cast<const AutoRefToController*>(
               &_AutoRefToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutoRefToController& a, AutoRefToController& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefToController* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefToController* New() const final {
    return CreateMaybeMessage<AutoRefToController>(nullptr);
  }

  AutoRefToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefToController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefToController& from);
  void MergeFrom(const AutoRefToController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefToController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefToController";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kGameEventFieldNumber = 2,
    kAutoRefMessageFieldNumber = 3,
  };
  // optional .Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // optional .GameEvent game_event = 2;
  bool has_game_event() const;
  void clear_game_event();
  const ::GameEvent& game_event() const;
  ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);

  // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_auto_ref_message() const;
  PROTOBUF_DEPRECATED void clear_auto_ref_message();
  PROTOBUF_DEPRECATED const ::AutoRefMessage& auto_ref_message() const;
  PROTOBUF_DEPRECATED ::AutoRefMessage* release_auto_ref_message();
  PROTOBUF_DEPRECATED ::AutoRefMessage* mutable_auto_ref_message();
  PROTOBUF_DEPRECATED void set_allocated_auto_ref_message(::AutoRefMessage* auto_ref_message);

  // @@protoc_insertion_point(class_scope:AutoRefToController)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Signature* signature_;
  ::GameEvent* game_event_;
  ::AutoRefMessage* auto_ref_message_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class ControllerToAutoRef :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerToAutoRef) */ {
 public:
  ControllerToAutoRef();
  virtual ~ControllerToAutoRef();

  ControllerToAutoRef(const ControllerToAutoRef& from);
  ControllerToAutoRef(ControllerToAutoRef&& from) noexcept
    : ControllerToAutoRef() {
    *this = ::std::move(from);
  }

  inline ControllerToAutoRef& operator=(const ControllerToAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToAutoRef& operator=(ControllerToAutoRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerToAutoRef& default_instance();

  enum MsgCase {
    kControllerReply = 1,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerToAutoRef* internal_default_instance() {
    return reinterpret_cast<const ControllerToAutoRef*>(
               &_ControllerToAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToAutoRef& a, ControllerToAutoRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToAutoRef* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerToAutoRef* New() const final {
    return CreateMaybeMessage<ControllerToAutoRef>(nullptr);
  }

  ControllerToAutoRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToAutoRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerToAutoRef& from);
  void MergeFrom(const ControllerToAutoRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToAutoRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerToAutoRef";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
  };
  // optional .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  void clear_controller_reply();
  const ::ControllerReply& controller_reply() const;
  ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToAutoRef)
 private:
  class _Internal;
  void set_has_controller_reply();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    ::ControllerReply* controller_reply_;
  } msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefMessage_WaitForBots_Violator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage.WaitForBots.Violator) */ {
 public:
  AutoRefMessage_WaitForBots_Violator();
  virtual ~AutoRefMessage_WaitForBots_Violator();

  AutoRefMessage_WaitForBots_Violator(const AutoRefMessage_WaitForBots_Violator& from);
  AutoRefMessage_WaitForBots_Violator(AutoRefMessage_WaitForBots_Violator&& from) noexcept
    : AutoRefMessage_WaitForBots_Violator() {
    *this = ::std::move(from);
  }

  inline AutoRefMessage_WaitForBots_Violator& operator=(const AutoRefMessage_WaitForBots_Violator& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefMessage_WaitForBots_Violator& operator=(AutoRefMessage_WaitForBots_Violator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefMessage_WaitForBots_Violator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefMessage_WaitForBots_Violator* internal_default_instance() {
    return reinterpret_cast<const AutoRefMessage_WaitForBots_Violator*>(
               &_AutoRefMessage_WaitForBots_Violator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutoRefMessage_WaitForBots_Violator& a, AutoRefMessage_WaitForBots_Violator& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefMessage_WaitForBots_Violator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefMessage_WaitForBots_Violator* New() const final {
    return CreateMaybeMessage<AutoRefMessage_WaitForBots_Violator>(nullptr);
  }

  AutoRefMessage_WaitForBots_Violator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefMessage_WaitForBots_Violator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefMessage_WaitForBots_Violator& from);
  void MergeFrom(const AutoRefMessage_WaitForBots_Violator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefMessage_WaitForBots_Violator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefMessage.WaitForBots.Violator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // required .BotId bot_id = 1;
  bool has_bot_id() const;
  void clear_bot_id();
  const ::BotId& bot_id() const;
  ::BotId* release_bot_id();
  ::BotId* mutable_bot_id();
  void set_allocated_bot_id(::BotId* bot_id);

  // required float distance = 2;
  bool has_distance() const;
  void clear_distance();
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:AutoRefMessage.WaitForBots.Violator)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::BotId* bot_id_;
  float distance_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefMessage_WaitForBots :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage.WaitForBots) */ {
 public:
  AutoRefMessage_WaitForBots();
  virtual ~AutoRefMessage_WaitForBots();

  AutoRefMessage_WaitForBots(const AutoRefMessage_WaitForBots& from);
  AutoRefMessage_WaitForBots(AutoRefMessage_WaitForBots&& from) noexcept
    : AutoRefMessage_WaitForBots() {
    *this = ::std::move(from);
  }

  inline AutoRefMessage_WaitForBots& operator=(const AutoRefMessage_WaitForBots& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefMessage_WaitForBots& operator=(AutoRefMessage_WaitForBots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefMessage_WaitForBots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefMessage_WaitForBots* internal_default_instance() {
    return reinterpret_cast<const AutoRefMessage_WaitForBots*>(
               &_AutoRefMessage_WaitForBots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AutoRefMessage_WaitForBots& a, AutoRefMessage_WaitForBots& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefMessage_WaitForBots* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefMessage_WaitForBots* New() const final {
    return CreateMaybeMessage<AutoRefMessage_WaitForBots>(nullptr);
  }

  AutoRefMessage_WaitForBots* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefMessage_WaitForBots>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefMessage_WaitForBots& from);
  void MergeFrom(const AutoRefMessage_WaitForBots& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefMessage_WaitForBots* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefMessage.WaitForBots";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutoRefMessage_WaitForBots_Violator Violator;

  // accessors -------------------------------------------------------

  enum : int {
    kViolatorsFieldNumber = 1,
  };
  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  int violators_size() const;
  void clear_violators();
  ::AutoRefMessage_WaitForBots_Violator* mutable_violators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >*
      mutable_violators();
  const ::AutoRefMessage_WaitForBots_Violator& violators(int index) const;
  ::AutoRefMessage_WaitForBots_Violator* add_violators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >&
      violators() const;

  // @@protoc_insertion_point(class_scope:AutoRefMessage.WaitForBots)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator > violators_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage) */ {
 public:
  AutoRefMessage();
  virtual ~AutoRefMessage();

  AutoRefMessage(const AutoRefMessage& from);
  AutoRefMessage(AutoRefMessage&& from) noexcept
    : AutoRefMessage() {
    *this = ::std::move(from);
  }

  inline AutoRefMessage& operator=(const AutoRefMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefMessage& operator=(AutoRefMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefMessage& default_instance();

  enum MessageCase {
    kCustom = 1,
    kWaitForBots = 2,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefMessage* internal_default_instance() {
    return reinterpret_cast<const AutoRefMessage*>(
               &_AutoRefMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutoRefMessage& a, AutoRefMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefMessage* New() const final {
    return CreateMaybeMessage<AutoRefMessage>(nullptr);
  }

  AutoRefMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefMessage& from);
  void MergeFrom(const AutoRefMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutoRefMessage_WaitForBots WaitForBots;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 1,
    kWaitForBotsFieldNumber = 2,
  };
  // optional string custom = 1;
  bool has_custom() const;
  void clear_custom();
  const std::string& custom() const;
  void set_custom(const std::string& value);
  void set_custom(std::string&& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  std::string* mutable_custom();
  std::string* release_custom();
  void set_allocated_custom(std::string* custom);

  // optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
  bool has_wait_for_bots() const;
  void clear_wait_for_bots();
  const ::AutoRefMessage_WaitForBots& wait_for_bots() const;
  ::AutoRefMessage_WaitForBots* release_wait_for_bots();
  ::AutoRefMessage_WaitForBots* mutable_wait_for_bots();
  void set_allocated_wait_for_bots(::AutoRefMessage_WaitForBots* wait_for_bots);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:AutoRefMessage)
 private:
  class _Internal;
  void set_has_custom();
  void set_has_wait_for_bots();

  inline bool has_message() const;
  inline void clear_has_message();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MessageUnion {
    MessageUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_;
    ::AutoRefMessage_WaitForBots* wait_for_bots_;
  } message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutoRefRegistration

// required string identifier = 1;
inline bool AutoRefRegistration::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRefRegistration::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutoRefRegistration::identifier() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.identifier)
  return identifier_.GetNoArena();
}
inline void AutoRefRegistration::set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefRegistration.identifier)
}
inline std::string* AutoRefRegistration::mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.identifier)
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutoRefRegistration::release_identifier() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.identifier)
  if (!has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutoRefRegistration::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.identifier)
}

// optional .Signature signature = 2;
inline bool AutoRefRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::Signature& AutoRefRegistration::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:AutoRefRegistration.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* AutoRefRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Signature* AutoRefRegistration::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.signature)
  return signature_;
}
inline void AutoRefRegistration::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.signature)
}

// -------------------------------------------------------------------

// AutoRefToController

// optional .Signature signature = 1;
inline bool AutoRefToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::Signature& AutoRefToController::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:AutoRefToController.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* AutoRefToController::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefToController.signature)
  _has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Signature* AutoRefToController::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.signature)
  return signature_;
}
inline void AutoRefToController::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.signature)
}

// optional .GameEvent game_event = 2;
inline bool AutoRefToController::has_game_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::GameEvent& AutoRefToController::game_event() const {
  const ::GameEvent* p = game_event_;
  // @@protoc_insertion_point(field_get:AutoRefToController.game_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::GameEvent*>(
      &::_GameEvent_default_instance_);
}
inline ::GameEvent* AutoRefToController::release_game_event() {
  // @@protoc_insertion_point(field_release:AutoRefToController.game_event)
  _has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = game_event_;
  game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* AutoRefToController::mutable_game_event() {
  _has_bits_[0] |= 0x00000002u;
  if (game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaNoVirtual());
    game_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.game_event)
  return game_event_;
}
inline void AutoRefToController::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.game_event)
}

// optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
inline bool AutoRefToController::has_auto_ref_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoRefToController::clear_auto_ref_message() {
  if (auto_ref_message_ != nullptr) auto_ref_message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::AutoRefMessage& AutoRefToController::auto_ref_message() const {
  const ::AutoRefMessage* p = auto_ref_message_;
  // @@protoc_insertion_point(field_get:AutoRefToController.auto_ref_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::AutoRefMessage*>(
      &::_AutoRefMessage_default_instance_);
}
inline ::AutoRefMessage* AutoRefToController::release_auto_ref_message() {
  // @@protoc_insertion_point(field_release:AutoRefToController.auto_ref_message)
  _has_bits_[0] &= ~0x00000004u;
  ::AutoRefMessage* temp = auto_ref_message_;
  auto_ref_message_ = nullptr;
  return temp;
}
inline ::AutoRefMessage* AutoRefToController::mutable_auto_ref_message() {
  _has_bits_[0] |= 0x00000004u;
  if (auto_ref_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::AutoRefMessage>(GetArenaNoVirtual());
    auto_ref_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.auto_ref_message)
  return auto_ref_message_;
}
inline void AutoRefToController::set_allocated_auto_ref_message(::AutoRefMessage* auto_ref_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete auto_ref_message_;
  }
  if (auto_ref_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_ref_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_ref_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  auto_ref_message_ = auto_ref_message;
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.auto_ref_message)
}

// -------------------------------------------------------------------

// ControllerToAutoRef

// optional .ControllerReply controller_reply = 1;
inline bool ControllerToAutoRef::has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline void ControllerToAutoRef::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
inline ::ControllerReply* ControllerToAutoRef::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToAutoRef.controller_reply)
  if (has_controller_reply()) {
    clear_has_msg();
      ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ControllerReply& ControllerToAutoRef::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToAutoRef.controller_reply)
  return has_controller_reply()
      ? *msg_.controller_reply_
      : *reinterpret_cast< ::ControllerReply*>(&::_ControllerReply_default_instance_);
}
inline ::ControllerReply* ControllerToAutoRef::mutable_controller_reply() {
  if (!has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = CreateMaybeMessage< ::ControllerReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ControllerToAutoRef.controller_reply)
  return msg_.controller_reply_;
}

inline bool ControllerToAutoRef::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToAutoRef::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToAutoRef::MsgCase ControllerToAutoRef::msg_case() const {
  return ControllerToAutoRef::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutoRefMessage_WaitForBots_Violator

// required .BotId bot_id = 1;
inline bool AutoRefMessage_WaitForBots_Violator::has_bot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::BotId& AutoRefMessage_WaitForBots_Violator::bot_id() const {
  const ::BotId* p = bot_id_;
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.bot_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::BotId*>(
      &::_BotId_default_instance_);
}
inline ::BotId* AutoRefMessage_WaitForBots_Violator::release_bot_id() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.WaitForBots.Violator.bot_id)
  _has_bits_[0] &= ~0x00000001u;
  ::BotId* temp = bot_id_;
  bot_id_ = nullptr;
  return temp;
}
inline ::BotId* AutoRefMessage_WaitForBots_Violator::mutable_bot_id() {
  _has_bits_[0] |= 0x00000001u;
  if (bot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BotId>(GetArenaNoVirtual());
    bot_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.Violator.bot_id)
  return bot_id_;
}
inline void AutoRefMessage_WaitForBots_Violator::set_allocated_bot_id(::BotId* bot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_id_);
  }
  if (bot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bot_id_ = bot_id;
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.WaitForBots.Violator.bot_id)
}

// required float distance = 2;
inline bool AutoRefMessage_WaitForBots_Violator::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRefMessage_WaitForBots_Violator::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AutoRefMessage_WaitForBots_Violator::distance() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.distance)
  return distance_;
}
inline void AutoRefMessage_WaitForBots_Violator::set_distance(float value) {
  _has_bits_[0] |= 0x00000002u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:AutoRefMessage.WaitForBots.Violator.distance)
}

// -------------------------------------------------------------------

// AutoRefMessage_WaitForBots

// repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
inline int AutoRefMessage_WaitForBots::violators_size() const {
  return violators_.size();
}
inline void AutoRefMessage_WaitForBots::clear_violators() {
  violators_.Clear();
}
inline ::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::mutable_violators(int index) {
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.violators)
  return violators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >*
AutoRefMessage_WaitForBots::mutable_violators() {
  // @@protoc_insertion_point(field_mutable_list:AutoRefMessage.WaitForBots.violators)
  return &violators_;
}
inline const ::AutoRefMessage_WaitForBots_Violator& AutoRefMessage_WaitForBots::violators(int index) const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.violators)
  return violators_.Get(index);
}
inline ::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::add_violators() {
  // @@protoc_insertion_point(field_add:AutoRefMessage.WaitForBots.violators)
  return violators_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >&
AutoRefMessage_WaitForBots::violators() const {
  // @@protoc_insertion_point(field_list:AutoRefMessage.WaitForBots.violators)
  return violators_;
}

// -------------------------------------------------------------------

// AutoRefMessage

// optional string custom = 1;
inline bool AutoRefMessage::has_custom() const {
  return message_case() == kCustom;
}
inline void AutoRefMessage::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void AutoRefMessage::clear_custom() {
  if (has_custom()) {
    message_.custom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const std::string& AutoRefMessage::custom() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.custom)
  if (has_custom()) {
    return message_.custom_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AutoRefMessage::set_custom(const std::string& value) {
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
}
inline void AutoRefMessage::set_custom(std::string&& value) {
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AutoRefMessage.custom)
}
inline void AutoRefMessage::set_custom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefMessage.custom)
}
inline void AutoRefMessage::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefMessage.custom)
}
inline std::string* AutoRefMessage::mutable_custom() {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.custom)
  return message_.custom_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutoRefMessage::release_custom() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.custom)
  if (has_custom()) {
    clear_has_message();
    return message_.custom_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AutoRefMessage::set_allocated_custom(std::string* custom) {
  if (has_message()) {
    clear_message();
  }
  if (custom != nullptr) {
    set_has_custom();
    message_.custom_.UnsafeSetDefault(custom);
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.custom)
}

// optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
inline bool AutoRefMessage::has_wait_for_bots() const {
  return message_case() == kWaitForBots;
}
inline void AutoRefMessage::set_has_wait_for_bots() {
  _oneof_case_[0] = kWaitForBots;
}
inline void AutoRefMessage::clear_wait_for_bots() {
  if (has_wait_for_bots()) {
    delete message_.wait_for_bots_;
    clear_has_message();
  }
}
inline ::AutoRefMessage_WaitForBots* AutoRefMessage::release_wait_for_bots() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.wait_for_bots)
  if (has_wait_for_bots()) {
    clear_has_message();
      ::AutoRefMessage_WaitForBots* temp = message_.wait_for_bots_;
    message_.wait_for_bots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AutoRefMessage_WaitForBots& AutoRefMessage::wait_for_bots() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.wait_for_bots)
  return has_wait_for_bots()
      ? *message_.wait_for_bots_
      : *reinterpret_cast< ::AutoRefMessage_WaitForBots*>(&::_AutoRefMessage_WaitForBots_default_instance_);
}
inline ::AutoRefMessage_WaitForBots* AutoRefMessage::mutable_wait_for_bots() {
  if (!has_wait_for_bots()) {
    clear_message();
    set_has_wait_for_bots();
    message_.wait_for_bots_ = CreateMaybeMessage< ::AutoRefMessage_WaitForBots >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.wait_for_bots)
  return message_.wait_for_bots_;
}

inline bool AutoRefMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void AutoRefMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline AutoRefMessage::MessageCase AutoRefMessage::message_case() const {
  return AutoRefMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
