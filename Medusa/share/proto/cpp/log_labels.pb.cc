// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labels.proto

#include "log_labels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_log_5flabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallPossessionLabel_log_5flabels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_log_5flabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DribblingLabel_log_5flabels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_log_5flabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoalShotLabel_log_5flabels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_log_5flabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassingLabel_log_5flabels_2eproto;
class DribblingLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DribblingLabel> _instance;
} _DribblingLabel_default_instance_;
class BallPossessionLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BallPossessionLabel> _instance;
} _BallPossessionLabel_default_instance_;
class PassingLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PassingLabel> _instance;
} _PassingLabel_default_instance_;
class GoalShotLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoalShotLabel> _instance;
} _GoalShotLabel_default_instance_;
class LabelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Labels> _instance;
} _Labels_default_instance_;
static void InitDefaultsscc_info_BallPossessionLabel_log_5flabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BallPossessionLabel_default_instance_;
    new (ptr) ::BallPossessionLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BallPossessionLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallPossessionLabel_log_5flabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BallPossessionLabel_log_5flabels_2eproto}, {}};

static void InitDefaultsscc_info_DribblingLabel_log_5flabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DribblingLabel_default_instance_;
    new (ptr) ::DribblingLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DribblingLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DribblingLabel_log_5flabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DribblingLabel_log_5flabels_2eproto}, {}};

static void InitDefaultsscc_info_GoalShotLabel_log_5flabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GoalShotLabel_default_instance_;
    new (ptr) ::GoalShotLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoalShotLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoalShotLabel_log_5flabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GoalShotLabel_log_5flabels_2eproto}, {}};

static void InitDefaultsscc_info_Labels_log_5flabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Labels_default_instance_;
    new (ptr) ::Labels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Labels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Labels_log_5flabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Labels_log_5flabels_2eproto}, {
      &scc_info_DribblingLabel_log_5flabels_2eproto.base,
      &scc_info_BallPossessionLabel_log_5flabels_2eproto.base,
      &scc_info_PassingLabel_log_5flabels_2eproto.base,
      &scc_info_GoalShotLabel_log_5flabels_2eproto.base,}};

static void InitDefaultsscc_info_PassingLabel_log_5flabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PassingLabel_default_instance_;
    new (ptr) ::PassingLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PassingLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassingLabel_log_5flabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PassingLabel_log_5flabels_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_log_5flabels_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_log_5flabels_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_log_5flabels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_log_5flabels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DribblingLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DribblingLabel, is_dribbling_),
  PROTOBUF_FIELD_OFFSET(::DribblingLabel, robot_id_),
  PROTOBUF_FIELD_OFFSET(::DribblingLabel, team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BallPossessionLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BallPossessionLabel, state_),
  PROTOBUF_FIELD_OFFSET(::BallPossessionLabel, robot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PassingLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PassingLabel, start_frame_),
  PROTOBUF_FIELD_OFFSET(::PassingLabel, end_frame_),
  PROTOBUF_FIELD_OFFSET(::PassingLabel, successful_),
  PROTOBUF_FIELD_OFFSET(::PassingLabel, passer_id_),
  PROTOBUF_FIELD_OFFSET(::PassingLabel, passer_team_),
  PROTOBUF_FIELD_OFFSET(::PassingLabel, receiver_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, start_frame_),
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, end_frame_),
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, successful_),
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, shooter_id_),
  PROTOBUF_FIELD_OFFSET(::GoalShotLabel, shooter_team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Labels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Labels, dribbling_labels_),
  PROTOBUF_FIELD_OFFSET(::Labels, ball_possession_labels_),
  PROTOBUF_FIELD_OFFSET(::Labels, passing_labels_),
  PROTOBUF_FIELD_OFFSET(::Labels, goal_shot_labels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DribblingLabel)},
  { 8, -1, sizeof(::BallPossessionLabel)},
  { 15, -1, sizeof(::PassingLabel)},
  { 26, -1, sizeof(::GoalShotLabel)},
  { 36, -1, sizeof(::Labels)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DribblingLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BallPossessionLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PassingLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GoalShotLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Labels_default_instance_),
};

const char descriptor_table_protodef_log_5flabels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020log_labels.proto\"R\n\016DribblingLabel\022\024\n\014"
  "is_dribbling\030\001 \001(\010\022\020\n\010robot_id\030\002 \001(\r\022\030\n\004"
  "team\030\003 \001(\0162\n.TeamColor\"\211\001\n\023BallPossessio"
  "nLabel\022)\n\005state\030\001 \001(\0162\032.BallPossessionLa"
  "bel.State\022\020\n\010robot_id\030\002 \001(\r\"5\n\005State\022\010\n\004"
  "NONE\020\000\022\021\n\rYELLOW_POSSES\020\001\022\017\n\013BLUE_POSSES"
  "\020\002\"\223\001\n\014PassingLabel\022\023\n\013start_frame\030\001 \001(\004"
  "\022\021\n\tend_frame\030\002 \001(\004\022\022\n\nsuccessful\030\003 \001(\010\022"
  "\021\n\tpasser_id\030\004 \001(\r\022\037\n\013passer_team\030\005 \001(\0162"
  "\n.TeamColor\022\023\n\013receiver_id\030\006 \001(\r\"\201\001\n\rGoa"
  "lShotLabel\022\023\n\013start_frame\030\001 \001(\004\022\021\n\tend_f"
  "rame\030\002 \001(\004\022\022\n\nsuccessful\030\003 \001(\010\022\022\n\nshoote"
  "r_id\030\004 \001(\r\022 \n\014shooter_team\030\005 \001(\0162\n.TeamC"
  "olor\"\272\001\n\006Labels\022)\n\020dribbling_labels\030\001 \003("
  "\0132\017.DribblingLabel\0224\n\026ball_possession_la"
  "bels\030\002 \003(\0132\024.BallPossessionLabel\022%\n\016pass"
  "ing_labels\030\003 \003(\0132\r.PassingLabel\022(\n\020goal_"
  "shot_labels\030\004 \003(\0132\016.GoalShotLabel*)\n\tTea"
  "mColor\022\016\n\nTeamYELLOW\020\000\022\014\n\010TeamBLUE\020\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_log_5flabels_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_log_5flabels_2eproto_sccs[5] = {
  &scc_info_BallPossessionLabel_log_5flabels_2eproto.base,
  &scc_info_DribblingLabel_log_5flabels_2eproto.base,
  &scc_info_GoalShotLabel_log_5flabels_2eproto.base,
  &scc_info_Labels_log_5flabels_2eproto.base,
  &scc_info_PassingLabel_log_5flabels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_log_5flabels_2eproto_once;
static bool descriptor_table_log_5flabels_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5flabels_2eproto = {
  &descriptor_table_log_5flabels_2eproto_initialized, descriptor_table_protodef_log_5flabels_2eproto, "log_labels.proto", 764,
  &descriptor_table_log_5flabels_2eproto_once, descriptor_table_log_5flabels_2eproto_sccs, descriptor_table_log_5flabels_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_log_5flabels_2eproto::offsets,
  file_level_metadata_log_5flabels_2eproto, 5, file_level_enum_descriptors_log_5flabels_2eproto, file_level_service_descriptors_log_5flabels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_log_5flabels_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_log_5flabels_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BallPossessionLabel_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_log_5flabels_2eproto);
  return file_level_enum_descriptors_log_5flabels_2eproto[0];
}
bool BallPossessionLabel_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BallPossessionLabel_State BallPossessionLabel::NONE;
constexpr BallPossessionLabel_State BallPossessionLabel::YELLOW_POSSES;
constexpr BallPossessionLabel_State BallPossessionLabel::BLUE_POSSES;
constexpr BallPossessionLabel_State BallPossessionLabel::State_MIN;
constexpr BallPossessionLabel_State BallPossessionLabel::State_MAX;
constexpr int BallPossessionLabel::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_log_5flabels_2eproto);
  return file_level_enum_descriptors_log_5flabels_2eproto[1];
}
bool TeamColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DribblingLabel::InitAsDefaultInstance() {
}
class DribblingLabel::_Internal {
 public:
};

DribblingLabel::DribblingLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DribblingLabel)
}
DribblingLabel::DribblingLabel(const DribblingLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_dribbling_, &from.is_dribbling_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&is_dribbling_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:DribblingLabel)
}

void DribblingLabel::SharedCtor() {
  ::memset(&is_dribbling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&is_dribbling_)) + sizeof(team_));
}

DribblingLabel::~DribblingLabel() {
  // @@protoc_insertion_point(destructor:DribblingLabel)
  SharedDtor();
}

void DribblingLabel::SharedDtor() {
}

void DribblingLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DribblingLabel& DribblingLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DribblingLabel_log_5flabels_2eproto.base);
  return *internal_default_instance();
}


void DribblingLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:DribblingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_dribbling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&is_dribbling_)) + sizeof(team_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DribblingLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_dribbling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_dribbling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeamColor team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_team(static_cast<::TeamColor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DribblingLabel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DribblingLabel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_dribbling = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dribbling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor team = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DribblingLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DribblingLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DribblingLabel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DribblingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_dribbling(), output);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DribblingLabel)
}

::PROTOBUF_NAMESPACE_ID::uint8* DribblingLabel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DribblingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_dribbling(), target);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DribblingLabel)
  return target;
}

size_t DribblingLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DribblingLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_dribbling = 1;
  if (this->is_dribbling() != 0) {
    total_size += 1 + 1;
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // .TeamColor team = 3;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->team());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DribblingLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DribblingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const DribblingLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DribblingLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DribblingLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DribblingLabel)
    MergeFrom(*source);
  }
}

void DribblingLabel::MergeFrom(const DribblingLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DribblingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_dribbling() != 0) {
    set_is_dribbling(from.is_dribbling());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
}

void DribblingLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DribblingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DribblingLabel::CopyFrom(const DribblingLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DribblingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DribblingLabel::IsInitialized() const {
  return true;
}

void DribblingLabel::InternalSwap(DribblingLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_dribbling_, other->is_dribbling_);
  swap(robot_id_, other->robot_id_);
  swap(team_, other->team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DribblingLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BallPossessionLabel::InitAsDefaultInstance() {
}
class BallPossessionLabel::_Internal {
 public:
};

BallPossessionLabel::BallPossessionLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BallPossessionLabel)
}
BallPossessionLabel::BallPossessionLabel(const BallPossessionLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_id_) -
    reinterpret_cast<char*>(&state_)) + sizeof(robot_id_));
  // @@protoc_insertion_point(copy_constructor:BallPossessionLabel)
}

void BallPossessionLabel::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(robot_id_));
}

BallPossessionLabel::~BallPossessionLabel() {
  // @@protoc_insertion_point(destructor:BallPossessionLabel)
  SharedDtor();
}

void BallPossessionLabel::SharedDtor() {
}

void BallPossessionLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallPossessionLabel& BallPossessionLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BallPossessionLabel_log_5flabels_2eproto.base);
  return *internal_default_instance();
}


void BallPossessionLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:BallPossessionLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(robot_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BallPossessionLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BallPossessionLabel.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::BallPossessionLabel_State>(val));
        } else goto handle_unusual;
        continue;
      // uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BallPossessionLabel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BallPossessionLabel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BallPossessionLabel.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::BallPossessionLabel_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BallPossessionLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BallPossessionLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BallPossessionLabel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BallPossessionLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BallPossessionLabel)
}

::PROTOBUF_NAMESPACE_ID::uint8* BallPossessionLabel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BallPossessionLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BallPossessionLabel)
  return target;
}

size_t BallPossessionLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BallPossessionLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BallPossessionLabel.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 robot_id = 2;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallPossessionLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BallPossessionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const BallPossessionLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BallPossessionLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BallPossessionLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BallPossessionLabel)
    MergeFrom(*source);
  }
}

void BallPossessionLabel::MergeFrom(const BallPossessionLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BallPossessionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
}

void BallPossessionLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BallPossessionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPossessionLabel::CopyFrom(const BallPossessionLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BallPossessionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPossessionLabel::IsInitialized() const {
  return true;
}

void BallPossessionLabel::InternalSwap(BallPossessionLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(robot_id_, other->robot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BallPossessionLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PassingLabel::InitAsDefaultInstance() {
}
class PassingLabel::_Internal {
 public:
};

PassingLabel::PassingLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassingLabel)
}
PassingLabel::PassingLabel(const PassingLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_frame_, &from.start_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&start_frame_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:PassingLabel)
}

void PassingLabel::SharedCtor() {
  ::memset(&start_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&start_frame_)) + sizeof(receiver_id_));
}

PassingLabel::~PassingLabel() {
  // @@protoc_insertion_point(destructor:PassingLabel)
  SharedDtor();
}

void PassingLabel::SharedDtor() {
}

void PassingLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PassingLabel& PassingLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PassingLabel_log_5flabels_2eproto.base);
  return *internal_default_instance();
}


void PassingLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:PassingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&start_frame_)) + sizeof(receiver_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PassingLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool successful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 passer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          passer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeamColor passer_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_passer_team(static_cast<::TeamColor>(val));
        } else goto handle_unusual;
        continue;
      // uint32 receiver_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PassingLabel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassingLabel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_frame = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool successful = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 passer_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor passer_team = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passer_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiver_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassingLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassingLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PassingLabel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_frame(), output);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_frame(), output);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->successful(), output);
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->passer_id(), output);
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->passer_team(), output);
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->receiver_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassingLabel)
}

::PROTOBUF_NAMESPACE_ID::uint8* PassingLabel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassingLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_frame(), target);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_frame(), target);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->successful(), target);
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->passer_id(), target);
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->passer_team(), target);
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiver_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassingLabel)
  return target;
}

size_t PassingLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PassingLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_frame());
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->end_frame());
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  // uint32 passer_id = 4;
  if (this->passer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->passer_id());
  }

  // .TeamColor passer_team = 5;
  if (this->passer_team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->passer_team());
  }

  // uint32 receiver_id = 6;
  if (this->receiver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->receiver_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassingLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PassingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const PassingLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PassingLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PassingLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PassingLabel)
    MergeFrom(*source);
  }
}

void PassingLabel::MergeFrom(const PassingLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PassingLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_frame() != 0) {
    set_start_frame(from.start_frame());
  }
  if (from.end_frame() != 0) {
    set_end_frame(from.end_frame());
  }
  if (from.successful() != 0) {
    set_successful(from.successful());
  }
  if (from.passer_id() != 0) {
    set_passer_id(from.passer_id());
  }
  if (from.passer_team() != 0) {
    set_passer_team(from.passer_team());
  }
  if (from.receiver_id() != 0) {
    set_receiver_id(from.receiver_id());
  }
}

void PassingLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PassingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassingLabel::CopyFrom(const PassingLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PassingLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassingLabel::IsInitialized() const {
  return true;
}

void PassingLabel::InternalSwap(PassingLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_frame_, other->start_frame_);
  swap(end_frame_, other->end_frame_);
  swap(successful_, other->successful_);
  swap(passer_id_, other->passer_id_);
  swap(passer_team_, other->passer_team_);
  swap(receiver_id_, other->receiver_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassingLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GoalShotLabel::InitAsDefaultInstance() {
}
class GoalShotLabel::_Internal {
 public:
};

GoalShotLabel::GoalShotLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoalShotLabel)
}
GoalShotLabel::GoalShotLabel(const GoalShotLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_frame_, &from.start_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&shooter_team_) -
    reinterpret_cast<char*>(&start_frame_)) + sizeof(shooter_team_));
  // @@protoc_insertion_point(copy_constructor:GoalShotLabel)
}

void GoalShotLabel::SharedCtor() {
  ::memset(&start_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shooter_team_) -
      reinterpret_cast<char*>(&start_frame_)) + sizeof(shooter_team_));
}

GoalShotLabel::~GoalShotLabel() {
  // @@protoc_insertion_point(destructor:GoalShotLabel)
  SharedDtor();
}

void GoalShotLabel::SharedDtor() {
}

void GoalShotLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoalShotLabel& GoalShotLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoalShotLabel_log_5flabels_2eproto.base);
  return *internal_default_instance();
}


void GoalShotLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:GoalShotLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shooter_team_) -
      reinterpret_cast<char*>(&start_frame_)) + sizeof(shooter_team_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GoalShotLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool successful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shooter_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shooter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeamColor shooter_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_shooter_team(static_cast<::TeamColor>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GoalShotLabel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoalShotLabel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_frame = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool successful = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shooter_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shooter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TeamColor shooter_team = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shooter_team(static_cast< ::TeamColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoalShotLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoalShotLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GoalShotLabel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoalShotLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_frame(), output);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_frame(), output);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->successful(), output);
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->shooter_id(), output);
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->shooter_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GoalShotLabel)
}

::PROTOBUF_NAMESPACE_ID::uint8* GoalShotLabel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoalShotLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_frame(), target);
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_frame(), target);
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->successful(), target);
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->shooter_id(), target);
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->shooter_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoalShotLabel)
  return target;
}

size_t GoalShotLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoalShotLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_frame = 1;
  if (this->start_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_frame());
  }

  // uint64 end_frame = 2;
  if (this->end_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->end_frame());
  }

  // bool successful = 3;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  // uint32 shooter_id = 4;
  if (this->shooter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->shooter_id());
  }

  // .TeamColor shooter_team = 5;
  if (this->shooter_team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->shooter_team());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoalShotLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoalShotLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalShotLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoalShotLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoalShotLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoalShotLabel)
    MergeFrom(*source);
  }
}

void GoalShotLabel::MergeFrom(const GoalShotLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoalShotLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_frame() != 0) {
    set_start_frame(from.start_frame());
  }
  if (from.end_frame() != 0) {
    set_end_frame(from.end_frame());
  }
  if (from.successful() != 0) {
    set_successful(from.successful());
  }
  if (from.shooter_id() != 0) {
    set_shooter_id(from.shooter_id());
  }
  if (from.shooter_team() != 0) {
    set_shooter_team(from.shooter_team());
  }
}

void GoalShotLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoalShotLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalShotLabel::CopyFrom(const GoalShotLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoalShotLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalShotLabel::IsInitialized() const {
  return true;
}

void GoalShotLabel::InternalSwap(GoalShotLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_frame_, other->start_frame_);
  swap(end_frame_, other->end_frame_);
  swap(successful_, other->successful_);
  swap(shooter_id_, other->shooter_id_);
  swap(shooter_team_, other->shooter_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoalShotLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Labels::InitAsDefaultInstance() {
}
class Labels::_Internal {
 public:
};

Labels::Labels()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Labels)
}
Labels::Labels(const Labels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dribbling_labels_(from.dribbling_labels_),
      ball_possession_labels_(from.ball_possession_labels_),
      passing_labels_(from.passing_labels_),
      goal_shot_labels_(from.goal_shot_labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Labels)
}

void Labels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Labels_log_5flabels_2eproto.base);
}

Labels::~Labels() {
  // @@protoc_insertion_point(destructor:Labels)
  SharedDtor();
}

void Labels::SharedDtor() {
}

void Labels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Labels& Labels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Labels_log_5flabels_2eproto.base);
  return *internal_default_instance();
}


void Labels::Clear() {
// @@protoc_insertion_point(message_clear_start:Labels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dribbling_labels_.Clear();
  ball_possession_labels_.Clear();
  passing_labels_.Clear();
  goal_shot_labels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Labels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DribblingLabel dribbling_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dribbling_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .BallPossessionLabel ball_possession_labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ball_possession_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .PassingLabel passing_labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_passing_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .GoalShotLabel goal_shot_labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_goal_shot_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Labels::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Labels)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DribblingLabel dribbling_labels = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dribbling_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BallPossessionLabel ball_possession_labels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ball_possession_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PassingLabel passing_labels = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_passing_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoalShotLabel goal_shot_labels = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_goal_shot_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Labels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Labels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Labels::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Labels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DribblingLabel dribbling_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dribbling_labels_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dribbling_labels(static_cast<int>(i)),
      output);
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_possession_labels_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ball_possession_labels(static_cast<int>(i)),
      output);
  }

  // repeated .PassingLabel passing_labels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passing_labels_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->passing_labels(static_cast<int>(i)),
      output);
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->goal_shot_labels_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->goal_shot_labels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Labels)
}

::PROTOBUF_NAMESPACE_ID::uint8* Labels::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Labels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DribblingLabel dribbling_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dribbling_labels_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dribbling_labels(static_cast<int>(i)), target);
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ball_possession_labels_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ball_possession_labels(static_cast<int>(i)), target);
  }

  // repeated .PassingLabel passing_labels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passing_labels_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->passing_labels(static_cast<int>(i)), target);
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->goal_shot_labels_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->goal_shot_labels(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Labels)
  return target;
}

size_t Labels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Labels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DribblingLabel dribbling_labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dribbling_labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dribbling_labels(static_cast<int>(i)));
    }
  }

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ball_possession_labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ball_possession_labels(static_cast<int>(i)));
    }
  }

  // repeated .PassingLabel passing_labels = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->passing_labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->passing_labels(static_cast<int>(i)));
    }
  }

  // repeated .GoalShotLabel goal_shot_labels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->goal_shot_labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->goal_shot_labels(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Labels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Labels)
  GOOGLE_DCHECK_NE(&from, this);
  const Labels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Labels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Labels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Labels)
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Labels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dribbling_labels_.MergeFrom(from.dribbling_labels_);
  ball_possession_labels_.MergeFrom(from.ball_possession_labels_);
  passing_labels_.MergeFrom(from.passing_labels_);
  goal_shot_labels_.MergeFrom(from.goal_shot_labels_);
}

void Labels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {
  return true;
}

void Labels::InternalSwap(Labels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dribbling_labels_)->InternalSwap(CastToBase(&other->dribbling_labels_));
  CastToBase(&ball_possession_labels_)->InternalSwap(CastToBase(&other->ball_possession_labels_));
  CastToBase(&passing_labels_)->InternalSwap(CastToBase(&other->passing_labels_));
  CastToBase(&goal_shot_labels_)->InternalSwap(CastToBase(&other->goal_shot_labels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Labels::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DribblingLabel* Arena::CreateMaybeMessage< ::DribblingLabel >(Arena* arena) {
  return Arena::CreateInternal< ::DribblingLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::BallPossessionLabel* Arena::CreateMaybeMessage< ::BallPossessionLabel >(Arena* arena) {
  return Arena::CreateInternal< ::BallPossessionLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::PassingLabel* Arena::CreateMaybeMessage< ::PassingLabel >(Arena* arena) {
  return Arena::CreateInternal< ::PassingLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::GoalShotLabel* Arena::CreateMaybeMessage< ::GoalShotLabel >(Arena* arena) {
  return Arena::CreateInternal< ::GoalShotLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::Labels* Arena::CreateMaybeMessage< ::Labels >(Arena* arena) {
  return Arena::CreateInternal< ::Labels >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
